// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.151000,HLS_SYN_LAT=1027,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=96,HLS_SYN_FF=242,HLS_SYN_LUT=2519,HLS_VERSION=2018_3}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        relu
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [1023:0] A_q0;
output  [4:0] B_address0;
output   B_ce0;
input  [1023:0] B_q0;
output  [9:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input   relu;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten_reg_224;
reg   [5:0] i_reg_235;
reg   [5:0] j_reg_246;
wire   [0:0] relu_read_read_fu_180_p2;
wire   [0:0] exitcond_flatten_fu_267_p2;
reg   [0:0] exitcond_flatten_reg_1526;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_1526_pp0_iter1_reg;
wire   [10:0] indvar_flatten_next_fu_273_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] j_mid2_fu_291_p3;
reg   [5:0] j_mid2_reg_1535;
wire   [5:0] tmp_mid2_v_fu_299_p3;
reg   [5:0] tmp_mid2_v_reg_1540;
wire   [5:0] j_1_fu_317_p2;
reg   [9:0] C_addr_reg_1561;
wire   [30:0] tmp_81_fu_1308_p2;
reg   [30:0] tmp_81_reg_1566;
wire   [30:0] tmp_82_fu_1314_p2;
reg   [30:0] tmp_82_reg_1571;
wire   [31:0] tmp30_fu_1320_p2;
reg   [31:0] tmp30_reg_1576;
wire   [31:0] tmp46_fu_1390_p2;
reg   [31:0] tmp46_reg_1581;
wire   [31:0] tmp53_fu_1460_p2;
reg   [31:0] tmp53_reg_1586;
wire   [30:0] tmp_98_fu_1478_p2;
reg   [30:0] tmp_98_reg_1591;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [5:0] ap_phi_mux_i_phi_fu_239_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_260_p4;
wire   [31:0] tmp_8_cast_fu_1517_p1;
wire   [31:0] ap_phi_reg_pp0_iter2_storemerge_reg_257;
wire   [31:0] temp_1_s_fu_1492_p2;
wire   [63:0] tmp_mid2_fu_307_p1;
wire   [63:0] tmp_2_fu_312_p1;
wire   [63:0] tmp_100_cast_fu_343_p1;
wire   [0:0] exitcond_fu_285_p2;
wire   [5:0] i_1_fu_279_p2;
wire   [10:0] tmp_fu_323_p3;
wire   [11:0] tmp_99_cast_fu_330_p1;
wire   [11:0] tmp_2_cast_fu_334_p1;
wire   [11:0] tmp_3_fu_337_p2;
wire  signed [31:0] tmp_69_fu_352_p1;
wire  signed [31:0] tmp_4_fu_348_p1;
wire  signed [31:0] tmp_6_fu_372_p4;
wire  signed [31:0] tmp_5_fu_362_p4;
wire  signed [31:0] tmp_10_fu_398_p4;
wire  signed [31:0] tmp_9_fu_388_p4;
wire  signed [31:0] tmp_12_fu_424_p4;
wire  signed [31:0] tmp_11_fu_414_p4;
wire  signed [31:0] tmp_14_fu_450_p4;
wire  signed [31:0] tmp_13_fu_440_p4;
wire  signed [31:0] tmp_16_fu_476_p4;
wire  signed [31:0] tmp_15_fu_466_p4;
wire  signed [31:0] tmp_18_fu_502_p4;
wire  signed [31:0] tmp_17_fu_492_p4;
wire  signed [31:0] tmp_20_fu_528_p4;
wire  signed [31:0] tmp_19_fu_518_p4;
wire  signed [31:0] tmp_22_fu_554_p4;
wire  signed [31:0] tmp_21_fu_544_p4;
wire  signed [31:0] tmp_24_fu_580_p4;
wire  signed [31:0] tmp_23_fu_570_p4;
wire  signed [31:0] tmp_26_fu_606_p4;
wire  signed [31:0] tmp_25_fu_596_p4;
wire  signed [31:0] tmp_28_fu_632_p4;
wire  signed [31:0] tmp_27_fu_622_p4;
wire  signed [31:0] tmp_30_fu_658_p4;
wire  signed [31:0] tmp_29_fu_648_p4;
wire  signed [31:0] tmp_32_fu_684_p4;
wire  signed [31:0] tmp_31_fu_674_p4;
wire  signed [31:0] tmp_34_fu_710_p4;
wire  signed [31:0] tmp_33_fu_700_p4;
wire  signed [31:0] tmp_36_fu_736_p4;
wire  signed [31:0] tmp_35_fu_726_p4;
wire  signed [31:0] tmp_38_fu_762_p4;
wire  signed [31:0] tmp_37_fu_752_p4;
wire  signed [31:0] tmp_40_fu_788_p4;
wire  signed [31:0] tmp_39_fu_778_p4;
wire  signed [31:0] tmp_42_fu_814_p4;
wire  signed [31:0] tmp_41_fu_804_p4;
wire  signed [31:0] tmp_44_fu_840_p4;
wire  signed [31:0] tmp_43_fu_830_p4;
wire  signed [31:0] tmp_46_fu_866_p4;
wire  signed [31:0] tmp_45_fu_856_p4;
wire  signed [31:0] tmp_48_fu_892_p4;
wire  signed [31:0] tmp_47_fu_882_p4;
wire  signed [31:0] tmp_50_fu_918_p4;
wire  signed [31:0] tmp_49_fu_908_p4;
wire  signed [31:0] tmp_52_fu_944_p4;
wire  signed [31:0] tmp_51_fu_934_p4;
wire  signed [31:0] tmp_54_fu_970_p4;
wire  signed [31:0] tmp_53_fu_960_p4;
wire  signed [31:0] tmp_56_fu_996_p4;
wire  signed [31:0] tmp_55_fu_986_p4;
wire  signed [31:0] tmp_58_fu_1022_p4;
wire  signed [31:0] tmp_57_fu_1012_p4;
wire  signed [31:0] tmp_60_fu_1048_p4;
wire  signed [31:0] tmp_59_fu_1038_p4;
wire  signed [31:0] tmp_62_fu_1074_p4;
wire  signed [31:0] tmp_61_fu_1064_p4;
wire  signed [31:0] tmp_64_fu_1100_p4;
wire  signed [31:0] tmp_63_fu_1090_p4;
wire  signed [31:0] tmp_66_fu_1126_p4;
wire  signed [31:0] tmp_65_fu_1116_p4;
wire  signed [31:0] tmp_68_fu_1152_p4;
wire  signed [31:0] tmp_67_fu_1142_p4;
wire   [31:0] tmp_4_29_fu_1136_p2;
wire   [31:0] tmp_4_28_fu_1110_p2;
wire   [31:0] tmp_4_26_fu_1058_p2;
wire   [31:0] tmp_4_27_fu_1084_p2;
wire   [31:0] tmp2_fu_1174_p2;
wire   [31:0] tmp1_fu_1168_p2;
wire   [31:0] tmp_4_22_fu_954_p2;
wire   [31:0] tmp_4_23_fu_980_p2;
wire   [31:0] tmp_4_24_fu_1006_p2;
wire   [31:0] tmp_4_25_fu_1032_p2;
wire   [31:0] tmp37_fu_1200_p2;
wire   [31:0] tmp36_fu_1194_p2;
wire   [30:0] tmp_70_fu_1180_p1;
wire   [30:0] tmp_71_fu_1184_p1;
wire   [30:0] tmp_72_fu_1206_p1;
wire   [30:0] tmp_75_fu_1210_p1;
wire   [31:0] tmp32_fu_1188_p2;
wire   [31:0] tmp35_fu_1214_p2;
wire   [31:0] tmp_4_14_fu_746_p2;
wire   [31:0] tmp_4_15_fu_772_p2;
wire   [31:0] tmp_4_16_fu_798_p2;
wire   [31:0] tmp_4_17_fu_824_p2;
wire   [31:0] tmp41_fu_1244_p2;
wire   [31:0] tmp40_fu_1238_p2;
wire   [31:0] tmp_4_18_fu_850_p2;
wire   [31:0] tmp_4_19_fu_876_p2;
wire   [31:0] tmp_4_20_fu_902_p2;
wire   [31:0] tmp_4_21_fu_928_p2;
wire   [31:0] tmp44_fu_1270_p2;
wire   [31:0] tmp43_fu_1264_p2;
wire   [30:0] tmp_76_fu_1250_p1;
wire   [30:0] tmp_77_fu_1254_p1;
wire   [30:0] tmp_78_fu_1276_p1;
wire   [30:0] tmp_83_fu_1280_p1;
wire   [31:0] tmp39_fu_1258_p2;
wire   [31:0] tmp42_fu_1284_p2;
wire   [30:0] tmp_80_fu_1296_p2;
wire   [30:0] tmp_79_fu_1290_p2;
wire   [30:0] tmp_74_fu_1226_p2;
wire   [30:0] tmp_73_fu_1220_p2;
wire   [31:0] tmp31_fu_1232_p2;
wire   [31:0] tmp38_fu_1302_p2;
wire   [31:0] tmp_4_2_fu_408_p2;
wire   [31:0] tmp_s_fu_356_p2;
wire   [31:0] tmp_4_4_fu_460_p2;
wire   [31:0] tmp_4_1_fu_382_p2;
wire   [31:0] tmp49_fu_1332_p2;
wire   [31:0] tmp48_fu_1326_p2;
wire   [31:0] tmp_4_6_fu_512_p2;
wire   [31:0] tmp_4_3_fu_434_p2;
wire   [31:0] tmp_4_8_fu_564_p2;
wire   [31:0] tmp_4_5_fu_486_p2;
wire   [31:0] tmp52_fu_1358_p2;
wire   [31:0] tmp51_fu_1352_p2;
wire   [30:0] tmp_84_fu_1338_p1;
wire   [30:0] tmp_85_fu_1342_p1;
wire   [30:0] tmp_86_fu_1364_p1;
wire   [30:0] tmp_89_fu_1368_p1;
wire   [31:0] tmp47_fu_1346_p2;
wire   [31:0] tmp50_fu_1372_p2;
wire   [31:0] tmp_4_s_fu_616_p2;
wire   [31:0] tmp_4_7_fu_538_p2;
wire   [31:0] tmp_4_11_fu_668_p2;
wire   [31:0] tmp_4_9_fu_590_p2;
wire   [31:0] tmp56_fu_1402_p2;
wire   [31:0] tmp55_fu_1396_p2;
wire   [31:0] tmp_4_13_fu_720_p2;
wire   [31:0] tmp_4_10_fu_642_p2;
wire   [31:0] tmp_4_30_fu_1162_p2;
wire   [31:0] tmp_4_12_fu_694_p2;
wire   [31:0] tmp59_fu_1428_p2;
wire   [31:0] tmp58_fu_1422_p2;
wire   [30:0] tmp_90_fu_1408_p1;
wire   [30:0] tmp_91_fu_1412_p1;
wire   [30:0] tmp_92_fu_1434_p1;
wire   [30:0] tmp_99_fu_1438_p1;
wire   [31:0] tmp54_fu_1416_p2;
wire   [31:0] tmp57_fu_1442_p2;
wire   [30:0] tmp_94_fu_1454_p2;
wire   [30:0] tmp_93_fu_1448_p2;
wire   [30:0] tmp_88_fu_1384_p2;
wire   [30:0] tmp_87_fu_1378_p2;
wire   [30:0] tmp_95_fu_1466_p2;
wire   [30:0] tmp_96_fu_1472_p2;
wire   [31:0] tmp45_fu_1484_p2;
wire   [30:0] tmp_97_fu_1488_p2;
wire   [0:0] tmp_7_fu_1503_p2;
wire   [30:0] temp_1_30_cast_fu_1498_p2;
wire   [30:0] tmp_8_fu_1509_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_985;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1526 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_235 <= tmp_mid2_v_reg_1540;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_235 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_267_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_224 <= indvar_flatten_next_fu_273_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_224 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_267_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_246 <= j_1_fu_317_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_246 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1526 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_addr_reg_1561 <= tmp_100_cast_fu_343_p1;
        tmp30_reg_1576 <= tmp30_fu_1320_p2;
        tmp46_reg_1581 <= tmp46_fu_1390_p2;
        tmp53_reg_1586 <= tmp53_fu_1460_p2;
        tmp_81_reg_1566 <= tmp_81_fu_1308_p2;
        tmp_82_reg_1571 <= tmp_82_fu_1314_p2;
        tmp_98_reg_1591 <= tmp_98_fu_1478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_1526 <= exitcond_flatten_fu_267_p2;
        exitcond_flatten_reg_1526_pp0_iter1_reg <= exitcond_flatten_reg_1526;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_mid2_reg_1535 <= j_mid2_fu_291_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_267_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mid2_v_reg_1540 <= tmp_mid2_v_fu_299_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1526_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_267_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_1526 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_239_p4 = tmp_mid2_v_reg_1540;
    end else begin
        ap_phi_mux_i_phi_fu_239_p4 = i_reg_235;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_985)) begin
        if ((relu_read_read_fu_180_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_260_p4 = temp_1_s_fu_1492_p2;
        end else if ((relu_read_read_fu_180_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_260_p4 = tmp_8_cast_fu_1517_p1;
        end else begin
            ap_phi_mux_storemerge_phi_fu_260_p4 = ap_phi_reg_pp0_iter2_storemerge_reg_257;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_260_p4 = ap_phi_reg_pp0_iter2_storemerge_reg_257;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_267_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_267_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_mid2_fu_307_p1;

assign B_address0 = tmp_2_fu_312_p1;

assign C_address0 = C_addr_reg_1561;

assign C_d0 = ap_phi_mux_storemerge_phi_fu_260_p4;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_985 = ((exitcond_flatten_reg_1526_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_storemerge_reg_257 = 'bx;

assign exitcond_flatten_fu_267_p2 = ((indvar_flatten_reg_224 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond_fu_285_p2 = ((j_reg_246 == 6'd32) ? 1'b1 : 1'b0);

assign i_1_fu_279_p2 = (6'd1 + ap_phi_mux_i_phi_fu_239_p4);

assign indvar_flatten_next_fu_273_p2 = (indvar_flatten_reg_224 + 11'd1);

assign j_1_fu_317_p2 = (j_mid2_fu_291_p3 + 6'd1);

assign j_mid2_fu_291_p3 = ((exitcond_fu_285_p2[0:0] === 1'b1) ? 6'd0 : j_reg_246);

assign relu_read_read_fu_180_p2 = relu;

assign temp_1_30_cast_fu_1498_p2 = (tmp_98_reg_1591 + tmp_97_fu_1488_p2);

assign temp_1_s_fu_1492_p2 = (tmp30_reg_1576 + tmp45_fu_1484_p2);

assign tmp1_fu_1168_p2 = (tmp_4_29_fu_1136_p2 + tmp_4_28_fu_1110_p2);

assign tmp2_fu_1174_p2 = (tmp_4_26_fu_1058_p2 + tmp_4_27_fu_1084_p2);

assign tmp30_fu_1320_p2 = (tmp31_fu_1232_p2 + tmp38_fu_1302_p2);

assign tmp31_fu_1232_p2 = (tmp32_fu_1188_p2 + tmp35_fu_1214_p2);

assign tmp32_fu_1188_p2 = (tmp1_fu_1168_p2 + tmp2_fu_1174_p2);

assign tmp35_fu_1214_p2 = (tmp36_fu_1194_p2 + tmp37_fu_1200_p2);

assign tmp36_fu_1194_p2 = (tmp_4_22_fu_954_p2 + tmp_4_23_fu_980_p2);

assign tmp37_fu_1200_p2 = (tmp_4_24_fu_1006_p2 + tmp_4_25_fu_1032_p2);

assign tmp38_fu_1302_p2 = (tmp39_fu_1258_p2 + tmp42_fu_1284_p2);

assign tmp39_fu_1258_p2 = (tmp40_fu_1238_p2 + tmp41_fu_1244_p2);

assign tmp40_fu_1238_p2 = (tmp_4_14_fu_746_p2 + tmp_4_15_fu_772_p2);

assign tmp41_fu_1244_p2 = (tmp_4_16_fu_798_p2 + tmp_4_17_fu_824_p2);

assign tmp42_fu_1284_p2 = (tmp43_fu_1264_p2 + tmp44_fu_1270_p2);

assign tmp43_fu_1264_p2 = (tmp_4_18_fu_850_p2 + tmp_4_19_fu_876_p2);

assign tmp44_fu_1270_p2 = (tmp_4_20_fu_902_p2 + tmp_4_21_fu_928_p2);

assign tmp45_fu_1484_p2 = (tmp46_reg_1581 + tmp53_reg_1586);

assign tmp46_fu_1390_p2 = (tmp47_fu_1346_p2 + tmp50_fu_1372_p2);

assign tmp47_fu_1346_p2 = (tmp48_fu_1326_p2 + tmp49_fu_1332_p2);

assign tmp48_fu_1326_p2 = (tmp_4_2_fu_408_p2 + tmp_s_fu_356_p2);

assign tmp49_fu_1332_p2 = (tmp_4_4_fu_460_p2 + tmp_4_1_fu_382_p2);

assign tmp50_fu_1372_p2 = (tmp51_fu_1352_p2 + tmp52_fu_1358_p2);

assign tmp51_fu_1352_p2 = (tmp_4_6_fu_512_p2 + tmp_4_3_fu_434_p2);

assign tmp52_fu_1358_p2 = (tmp_4_8_fu_564_p2 + tmp_4_5_fu_486_p2);

assign tmp53_fu_1460_p2 = (tmp54_fu_1416_p2 + tmp57_fu_1442_p2);

assign tmp54_fu_1416_p2 = (tmp55_fu_1396_p2 + tmp56_fu_1402_p2);

assign tmp55_fu_1396_p2 = (tmp_4_s_fu_616_p2 + tmp_4_7_fu_538_p2);

assign tmp56_fu_1402_p2 = (tmp_4_11_fu_668_p2 + tmp_4_9_fu_590_p2);

assign tmp57_fu_1442_p2 = (tmp58_fu_1422_p2 + tmp59_fu_1428_p2);

assign tmp58_fu_1422_p2 = (tmp_4_13_fu_720_p2 + tmp_4_10_fu_642_p2);

assign tmp59_fu_1428_p2 = (tmp_4_30_fu_1162_p2 + tmp_4_12_fu_694_p2);

assign tmp_100_cast_fu_343_p1 = tmp_3_fu_337_p2;

assign tmp_10_fu_398_p4 = {{B_q0[95:64]}};

assign tmp_11_fu_414_p4 = {{A_q0[127:96]}};

assign tmp_12_fu_424_p4 = {{B_q0[127:96]}};

assign tmp_13_fu_440_p4 = {{A_q0[159:128]}};

assign tmp_14_fu_450_p4 = {{B_q0[159:128]}};

assign tmp_15_fu_466_p4 = {{A_q0[191:160]}};

assign tmp_16_fu_476_p4 = {{B_q0[191:160]}};

assign tmp_17_fu_492_p4 = {{A_q0[223:192]}};

assign tmp_18_fu_502_p4 = {{B_q0[223:192]}};

assign tmp_19_fu_518_p4 = {{A_q0[255:224]}};

assign tmp_20_fu_528_p4 = {{B_q0[255:224]}};

assign tmp_21_fu_544_p4 = {{A_q0[287:256]}};

assign tmp_22_fu_554_p4 = {{B_q0[287:256]}};

assign tmp_23_fu_570_p4 = {{A_q0[319:288]}};

assign tmp_24_fu_580_p4 = {{B_q0[319:288]}};

assign tmp_25_fu_596_p4 = {{A_q0[351:320]}};

assign tmp_26_fu_606_p4 = {{B_q0[351:320]}};

assign tmp_27_fu_622_p4 = {{A_q0[383:352]}};

assign tmp_28_fu_632_p4 = {{B_q0[383:352]}};

assign tmp_29_fu_648_p4 = {{A_q0[415:384]}};

assign tmp_2_cast_fu_334_p1 = j_mid2_reg_1535;

assign tmp_2_fu_312_p1 = j_mid2_fu_291_p3;

assign tmp_30_fu_658_p4 = {{B_q0[415:384]}};

assign tmp_31_fu_674_p4 = {{A_q0[447:416]}};

assign tmp_32_fu_684_p4 = {{B_q0[447:416]}};

assign tmp_33_fu_700_p4 = {{A_q0[479:448]}};

assign tmp_34_fu_710_p4 = {{B_q0[479:448]}};

assign tmp_35_fu_726_p4 = {{A_q0[511:480]}};

assign tmp_36_fu_736_p4 = {{B_q0[511:480]}};

assign tmp_37_fu_752_p4 = {{A_q0[543:512]}};

assign tmp_38_fu_762_p4 = {{B_q0[543:512]}};

assign tmp_39_fu_778_p4 = {{A_q0[575:544]}};

assign tmp_3_fu_337_p2 = (tmp_99_cast_fu_330_p1 + tmp_2_cast_fu_334_p1);

assign tmp_40_fu_788_p4 = {{B_q0[575:544]}};

assign tmp_41_fu_804_p4 = {{A_q0[607:576]}};

assign tmp_42_fu_814_p4 = {{B_q0[607:576]}};

assign tmp_43_fu_830_p4 = {{A_q0[639:608]}};

assign tmp_44_fu_840_p4 = {{B_q0[639:608]}};

assign tmp_45_fu_856_p4 = {{A_q0[671:640]}};

assign tmp_46_fu_866_p4 = {{B_q0[671:640]}};

assign tmp_47_fu_882_p4 = {{A_q0[703:672]}};

assign tmp_48_fu_892_p4 = {{B_q0[703:672]}};

assign tmp_49_fu_908_p4 = {{A_q0[735:704]}};

assign tmp_4_10_fu_642_p2 = ($signed(tmp_28_fu_632_p4) * $signed(tmp_27_fu_622_p4));

assign tmp_4_11_fu_668_p2 = ($signed(tmp_30_fu_658_p4) * $signed(tmp_29_fu_648_p4));

assign tmp_4_12_fu_694_p2 = ($signed(tmp_32_fu_684_p4) * $signed(tmp_31_fu_674_p4));

assign tmp_4_13_fu_720_p2 = ($signed(tmp_34_fu_710_p4) * $signed(tmp_33_fu_700_p4));

assign tmp_4_14_fu_746_p2 = ($signed(tmp_36_fu_736_p4) * $signed(tmp_35_fu_726_p4));

assign tmp_4_15_fu_772_p2 = ($signed(tmp_38_fu_762_p4) * $signed(tmp_37_fu_752_p4));

assign tmp_4_16_fu_798_p2 = ($signed(tmp_40_fu_788_p4) * $signed(tmp_39_fu_778_p4));

assign tmp_4_17_fu_824_p2 = ($signed(tmp_42_fu_814_p4) * $signed(tmp_41_fu_804_p4));

assign tmp_4_18_fu_850_p2 = ($signed(tmp_44_fu_840_p4) * $signed(tmp_43_fu_830_p4));

assign tmp_4_19_fu_876_p2 = ($signed(tmp_46_fu_866_p4) * $signed(tmp_45_fu_856_p4));

assign tmp_4_1_fu_382_p2 = ($signed(tmp_6_fu_372_p4) * $signed(tmp_5_fu_362_p4));

assign tmp_4_20_fu_902_p2 = ($signed(tmp_48_fu_892_p4) * $signed(tmp_47_fu_882_p4));

assign tmp_4_21_fu_928_p2 = ($signed(tmp_50_fu_918_p4) * $signed(tmp_49_fu_908_p4));

assign tmp_4_22_fu_954_p2 = ($signed(tmp_52_fu_944_p4) * $signed(tmp_51_fu_934_p4));

assign tmp_4_23_fu_980_p2 = ($signed(tmp_54_fu_970_p4) * $signed(tmp_53_fu_960_p4));

assign tmp_4_24_fu_1006_p2 = ($signed(tmp_56_fu_996_p4) * $signed(tmp_55_fu_986_p4));

assign tmp_4_25_fu_1032_p2 = ($signed(tmp_58_fu_1022_p4) * $signed(tmp_57_fu_1012_p4));

assign tmp_4_26_fu_1058_p2 = ($signed(tmp_60_fu_1048_p4) * $signed(tmp_59_fu_1038_p4));

assign tmp_4_27_fu_1084_p2 = ($signed(tmp_62_fu_1074_p4) * $signed(tmp_61_fu_1064_p4));

assign tmp_4_28_fu_1110_p2 = ($signed(tmp_64_fu_1100_p4) * $signed(tmp_63_fu_1090_p4));

assign tmp_4_29_fu_1136_p2 = ($signed(tmp_66_fu_1126_p4) * $signed(tmp_65_fu_1116_p4));

assign tmp_4_2_fu_408_p2 = ($signed(tmp_10_fu_398_p4) * $signed(tmp_9_fu_388_p4));

assign tmp_4_30_fu_1162_p2 = ($signed(tmp_68_fu_1152_p4) * $signed(tmp_67_fu_1142_p4));

assign tmp_4_3_fu_434_p2 = ($signed(tmp_12_fu_424_p4) * $signed(tmp_11_fu_414_p4));

assign tmp_4_4_fu_460_p2 = ($signed(tmp_14_fu_450_p4) * $signed(tmp_13_fu_440_p4));

assign tmp_4_5_fu_486_p2 = ($signed(tmp_16_fu_476_p4) * $signed(tmp_15_fu_466_p4));

assign tmp_4_6_fu_512_p2 = ($signed(tmp_18_fu_502_p4) * $signed(tmp_17_fu_492_p4));

assign tmp_4_7_fu_538_p2 = ($signed(tmp_20_fu_528_p4) * $signed(tmp_19_fu_518_p4));

assign tmp_4_8_fu_564_p2 = ($signed(tmp_22_fu_554_p4) * $signed(tmp_21_fu_544_p4));

assign tmp_4_9_fu_590_p2 = ($signed(tmp_24_fu_580_p4) * $signed(tmp_23_fu_570_p4));

assign tmp_4_fu_348_p1 = A_q0[31:0];

assign tmp_4_s_fu_616_p2 = ($signed(tmp_26_fu_606_p4) * $signed(tmp_25_fu_596_p4));

assign tmp_50_fu_918_p4 = {{B_q0[735:704]}};

assign tmp_51_fu_934_p4 = {{A_q0[767:736]}};

assign tmp_52_fu_944_p4 = {{B_q0[767:736]}};

assign tmp_53_fu_960_p4 = {{A_q0[799:768]}};

assign tmp_54_fu_970_p4 = {{B_q0[799:768]}};

assign tmp_55_fu_986_p4 = {{A_q0[831:800]}};

assign tmp_56_fu_996_p4 = {{B_q0[831:800]}};

assign tmp_57_fu_1012_p4 = {{A_q0[863:832]}};

assign tmp_58_fu_1022_p4 = {{B_q0[863:832]}};

assign tmp_59_fu_1038_p4 = {{A_q0[895:864]}};

assign tmp_5_fu_362_p4 = {{A_q0[63:32]}};

assign tmp_60_fu_1048_p4 = {{B_q0[895:864]}};

assign tmp_61_fu_1064_p4 = {{A_q0[927:896]}};

assign tmp_62_fu_1074_p4 = {{B_q0[927:896]}};

assign tmp_63_fu_1090_p4 = {{A_q0[959:928]}};

assign tmp_64_fu_1100_p4 = {{B_q0[959:928]}};

assign tmp_65_fu_1116_p4 = {{A_q0[991:960]}};

assign tmp_66_fu_1126_p4 = {{B_q0[991:960]}};

assign tmp_67_fu_1142_p4 = {{A_q0[1023:992]}};

assign tmp_68_fu_1152_p4 = {{B_q0[1023:992]}};

assign tmp_69_fu_352_p1 = B_q0[31:0];

assign tmp_6_fu_372_p4 = {{B_q0[63:32]}};

assign tmp_70_fu_1180_p1 = tmp2_fu_1174_p2[30:0];

assign tmp_71_fu_1184_p1 = tmp1_fu_1168_p2[30:0];

assign tmp_72_fu_1206_p1 = tmp37_fu_1200_p2[30:0];

assign tmp_73_fu_1220_p2 = (tmp_70_fu_1180_p1 + tmp_71_fu_1184_p1);

assign tmp_74_fu_1226_p2 = (tmp_72_fu_1206_p1 + tmp_75_fu_1210_p1);

assign tmp_75_fu_1210_p1 = tmp36_fu_1194_p2[30:0];

assign tmp_76_fu_1250_p1 = tmp41_fu_1244_p2[30:0];

assign tmp_77_fu_1254_p1 = tmp40_fu_1238_p2[30:0];

assign tmp_78_fu_1276_p1 = tmp44_fu_1270_p2[30:0];

assign tmp_79_fu_1290_p2 = (tmp_76_fu_1250_p1 + tmp_77_fu_1254_p1);

assign tmp_7_fu_1503_p2 = (($signed(temp_1_s_fu_1492_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_80_fu_1296_p2 = (tmp_78_fu_1276_p1 + tmp_83_fu_1280_p1);

assign tmp_81_fu_1308_p2 = (tmp_80_fu_1296_p2 + tmp_79_fu_1290_p2);

assign tmp_82_fu_1314_p2 = (tmp_74_fu_1226_p2 + tmp_73_fu_1220_p2);

assign tmp_83_fu_1280_p1 = tmp43_fu_1264_p2[30:0];

assign tmp_84_fu_1338_p1 = tmp49_fu_1332_p2[30:0];

assign tmp_85_fu_1342_p1 = tmp48_fu_1326_p2[30:0];

assign tmp_86_fu_1364_p1 = tmp52_fu_1358_p2[30:0];

assign tmp_87_fu_1378_p2 = (tmp_84_fu_1338_p1 + tmp_85_fu_1342_p1);

assign tmp_88_fu_1384_p2 = (tmp_86_fu_1364_p1 + tmp_89_fu_1368_p1);

assign tmp_89_fu_1368_p1 = tmp51_fu_1352_p2[30:0];

assign tmp_8_cast_fu_1517_p1 = tmp_8_fu_1509_p3;

assign tmp_8_fu_1509_p3 = ((tmp_7_fu_1503_p2[0:0] === 1'b1) ? temp_1_30_cast_fu_1498_p2 : 31'd0);

assign tmp_90_fu_1408_p1 = tmp56_fu_1402_p2[30:0];

assign tmp_91_fu_1412_p1 = tmp55_fu_1396_p2[30:0];

assign tmp_92_fu_1434_p1 = tmp59_fu_1428_p2[30:0];

assign tmp_93_fu_1448_p2 = (tmp_90_fu_1408_p1 + tmp_91_fu_1412_p1);

assign tmp_94_fu_1454_p2 = (tmp_92_fu_1434_p1 + tmp_99_fu_1438_p1);

assign tmp_95_fu_1466_p2 = (tmp_94_fu_1454_p2 + tmp_93_fu_1448_p2);

assign tmp_96_fu_1472_p2 = (tmp_88_fu_1384_p2 + tmp_87_fu_1378_p2);

assign tmp_97_fu_1488_p2 = (tmp_81_reg_1566 + tmp_82_reg_1571);

assign tmp_98_fu_1478_p2 = (tmp_95_fu_1466_p2 + tmp_96_fu_1472_p2);

assign tmp_99_cast_fu_330_p1 = tmp_fu_323_p3;

assign tmp_99_fu_1438_p1 = tmp58_fu_1422_p2[30:0];

assign tmp_9_fu_388_p4 = {{A_q0[95:64]}};

assign tmp_fu_323_p3 = {{tmp_mid2_v_reg_1540}, {5'd0}};

assign tmp_mid2_fu_307_p1 = tmp_mid2_v_fu_299_p3;

assign tmp_mid2_v_fu_299_p3 = ((exitcond_fu_285_p2[0:0] === 1'b1) ? i_1_fu_279_p2 : ap_phi_mux_i_phi_fu_239_p4);

assign tmp_s_fu_356_p2 = ($signed(tmp_69_fu_352_p1) * $signed(tmp_4_fu_348_p1));

endmodule //matrix_mult
