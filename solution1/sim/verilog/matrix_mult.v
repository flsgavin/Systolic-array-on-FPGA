// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.151000,HLS_SYN_LAT=4099,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=192,HLS_SYN_FF=376,HLS_SYN_LUT=4871,HLS_VERSION=2018_3}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        relu
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [2047:0] A_q0;
output  [5:0] B_address0;
output   B_ce0;
input  [2047:0] B_q0;
output  [11:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input   relu;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten_reg_352;
reg   [6:0] i_reg_363;
reg   [6:0] j_reg_374;
wire   [0:0] relu_read_read_fu_308_p2;
wire   [0:0] exitcond_flatten_fu_395_p2;
reg   [0:0] exitcond_flatten_reg_2834;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_2834_pp0_iter1_reg;
wire   [12:0] indvar_flatten_next_fu_401_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] j_mid2_fu_419_p3;
reg   [6:0] j_mid2_reg_2843;
wire   [6:0] tmp_mid2_v_fu_427_p3;
reg   [6:0] tmp_mid2_v_reg_2848;
wire   [6:0] j_1_fu_445_p2;
reg   [11:0] C_addr_reg_2869;
wire   [31:0] tmp63_fu_2280_p2;
reg   [31:0] tmp63_reg_2874;
wire   [30:0] tmp_159_fu_2426_p2;
reg   [30:0] tmp_159_reg_2879;
wire   [30:0] tmp_160_fu_2432_p2;
reg   [30:0] tmp_160_reg_2884;
wire   [31:0] tmp78_fu_2438_p2;
reg   [31:0] tmp78_reg_2889;
wire   [30:0] tmp_162_fu_2444_p2;
reg   [30:0] tmp_162_reg_2894;
wire   [31:0] tmp95_fu_2514_p2;
reg   [31:0] tmp95_reg_2899;
wire   [31:0] tmp102_fu_2584_p2;
reg   [31:0] tmp102_reg_2904;
wire   [31:0] tmp109_fu_2754_p2;
reg   [31:0] tmp109_reg_2909;
wire   [30:0] tmp_191_fu_2760_p2;
reg   [30:0] tmp_191_reg_2914;
wire   [30:0] tmp_192_fu_2766_p2;
reg   [30:0] tmp_192_reg_2919;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [6:0] ap_phi_mux_i_phi_fu_367_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_388_p4;
wire   [31:0] tmp_8_cast_fu_2825_p1;
wire   [31:0] ap_phi_reg_pp0_iter2_storemerge_reg_385;
wire   [31:0] temp_1_s_fu_2798_p2;
wire   [63:0] tmp_mid2_fu_435_p1;
wire   [63:0] tmp_2_fu_440_p1;
wire   [63:0] tmp_196_cast_fu_471_p1;
wire   [0:0] exitcond_fu_413_p2;
wire   [6:0] i_1_fu_407_p2;
wire   [12:0] tmp_fu_451_p3;
wire   [13:0] tmp_195_cast_fu_458_p1;
wire   [13:0] tmp_2_cast_fu_462_p1;
wire   [13:0] tmp_3_fu_465_p2;
wire  signed [31:0] tmp_4_fu_476_p1;
wire  signed [31:0] tmp_133_fu_480_p1;
wire  signed [31:0] tmp_5_fu_490_p4;
wire  signed [31:0] tmp_6_fu_500_p4;
wire  signed [31:0] tmp_9_fu_516_p4;
wire  signed [31:0] tmp_10_fu_526_p4;
wire  signed [31:0] tmp_11_fu_542_p4;
wire  signed [31:0] tmp_12_fu_552_p4;
wire  signed [31:0] tmp_13_fu_568_p4;
wire  signed [31:0] tmp_14_fu_578_p4;
wire  signed [31:0] tmp_15_fu_594_p4;
wire  signed [31:0] tmp_16_fu_604_p4;
wire  signed [31:0] tmp_17_fu_620_p4;
wire  signed [31:0] tmp_18_fu_630_p4;
wire  signed [31:0] tmp_19_fu_646_p4;
wire  signed [31:0] tmp_20_fu_656_p4;
wire  signed [31:0] tmp_21_fu_672_p4;
wire  signed [31:0] tmp_22_fu_682_p4;
wire  signed [31:0] tmp_23_fu_698_p4;
wire  signed [31:0] tmp_24_fu_708_p4;
wire  signed [31:0] tmp_25_fu_724_p4;
wire  signed [31:0] tmp_26_fu_734_p4;
wire  signed [31:0] tmp_27_fu_750_p4;
wire  signed [31:0] tmp_28_fu_760_p4;
wire  signed [31:0] tmp_29_fu_776_p4;
wire  signed [31:0] tmp_30_fu_786_p4;
wire  signed [31:0] tmp_31_fu_802_p4;
wire  signed [31:0] tmp_32_fu_812_p4;
wire  signed [31:0] tmp_33_fu_828_p4;
wire  signed [31:0] tmp_34_fu_838_p4;
wire  signed [31:0] tmp_35_fu_854_p4;
wire  signed [31:0] tmp_36_fu_864_p4;
wire  signed [31:0] tmp_37_fu_880_p4;
wire  signed [31:0] tmp_38_fu_890_p4;
wire  signed [31:0] tmp_39_fu_906_p4;
wire  signed [31:0] tmp_40_fu_916_p4;
wire  signed [31:0] tmp_41_fu_932_p4;
wire  signed [31:0] tmp_42_fu_942_p4;
wire  signed [31:0] tmp_43_fu_958_p4;
wire  signed [31:0] tmp_44_fu_968_p4;
wire  signed [31:0] tmp_45_fu_984_p4;
wire  signed [31:0] tmp_46_fu_994_p4;
wire  signed [31:0] tmp_47_fu_1010_p4;
wire  signed [31:0] tmp_48_fu_1020_p4;
wire  signed [31:0] tmp_49_fu_1036_p4;
wire  signed [31:0] tmp_50_fu_1046_p4;
wire  signed [31:0] tmp_51_fu_1062_p4;
wire  signed [31:0] tmp_52_fu_1072_p4;
wire  signed [31:0] tmp_53_fu_1088_p4;
wire  signed [31:0] tmp_54_fu_1098_p4;
wire  signed [31:0] tmp_55_fu_1114_p4;
wire  signed [31:0] tmp_56_fu_1124_p4;
wire  signed [31:0] tmp_57_fu_1140_p4;
wire  signed [31:0] tmp_58_fu_1150_p4;
wire  signed [31:0] tmp_59_fu_1166_p4;
wire  signed [31:0] tmp_60_fu_1176_p4;
wire  signed [31:0] tmp_61_fu_1192_p4;
wire  signed [31:0] tmp_62_fu_1202_p4;
wire  signed [31:0] tmp_63_fu_1218_p4;
wire  signed [31:0] tmp_64_fu_1228_p4;
wire  signed [31:0] tmp_65_fu_1244_p4;
wire  signed [31:0] tmp_66_fu_1254_p4;
wire  signed [31:0] tmp_67_fu_1270_p4;
wire  signed [31:0] tmp_68_fu_1280_p4;
wire  signed [31:0] tmp_69_fu_1296_p4;
wire  signed [31:0] tmp_70_fu_1306_p4;
wire  signed [31:0] tmp_71_fu_1322_p4;
wire  signed [31:0] tmp_72_fu_1332_p4;
wire  signed [31:0] tmp_73_fu_1348_p4;
wire  signed [31:0] tmp_74_fu_1358_p4;
wire  signed [31:0] tmp_75_fu_1374_p4;
wire  signed [31:0] tmp_76_fu_1384_p4;
wire  signed [31:0] tmp_77_fu_1400_p4;
wire  signed [31:0] tmp_78_fu_1410_p4;
wire  signed [31:0] tmp_79_fu_1426_p4;
wire  signed [31:0] tmp_80_fu_1436_p4;
wire  signed [31:0] tmp_81_fu_1452_p4;
wire  signed [31:0] tmp_82_fu_1462_p4;
wire  signed [31:0] tmp_83_fu_1478_p4;
wire  signed [31:0] tmp_84_fu_1488_p4;
wire  signed [31:0] tmp_85_fu_1504_p4;
wire  signed [31:0] tmp_86_fu_1514_p4;
wire  signed [31:0] tmp_87_fu_1530_p4;
wire  signed [31:0] tmp_88_fu_1540_p4;
wire  signed [31:0] tmp_89_fu_1556_p4;
wire  signed [31:0] tmp_90_fu_1566_p4;
wire  signed [31:0] tmp_91_fu_1582_p4;
wire  signed [31:0] tmp_92_fu_1592_p4;
wire  signed [31:0] tmp_93_fu_1608_p4;
wire  signed [31:0] tmp_94_fu_1618_p4;
wire  signed [31:0] tmp_95_fu_1634_p4;
wire  signed [31:0] tmp_96_fu_1644_p4;
wire  signed [31:0] tmp_97_fu_1660_p4;
wire  signed [31:0] tmp_98_fu_1670_p4;
wire  signed [31:0] tmp_99_fu_1686_p4;
wire  signed [31:0] tmp_100_fu_1696_p4;
wire  signed [31:0] tmp_101_fu_1712_p4;
wire  signed [31:0] tmp_102_fu_1722_p4;
wire  signed [31:0] tmp_103_fu_1738_p4;
wire  signed [31:0] tmp_104_fu_1748_p4;
wire  signed [31:0] tmp_105_fu_1764_p4;
wire  signed [31:0] tmp_106_fu_1774_p4;
wire  signed [31:0] tmp_107_fu_1790_p4;
wire  signed [31:0] tmp_108_fu_1800_p4;
wire  signed [31:0] tmp_109_fu_1816_p4;
wire  signed [31:0] tmp_110_fu_1826_p4;
wire  signed [31:0] tmp_111_fu_1842_p4;
wire  signed [31:0] tmp_112_fu_1852_p4;
wire  signed [31:0] tmp_113_fu_1868_p4;
wire  signed [31:0] tmp_114_fu_1878_p4;
wire  signed [31:0] tmp_115_fu_1894_p4;
wire  signed [31:0] tmp_116_fu_1904_p4;
wire  signed [31:0] tmp_117_fu_1920_p4;
wire  signed [31:0] tmp_118_fu_1930_p4;
wire  signed [31:0] tmp_119_fu_1946_p4;
wire  signed [31:0] tmp_120_fu_1956_p4;
wire  signed [31:0] tmp_121_fu_1972_p4;
wire  signed [31:0] tmp_122_fu_1982_p4;
wire  signed [31:0] tmp_123_fu_1998_p4;
wire  signed [31:0] tmp_124_fu_2008_p4;
wire  signed [31:0] tmp_125_fu_2024_p4;
wire  signed [31:0] tmp_126_fu_2034_p4;
wire  signed [31:0] tmp_127_fu_2050_p4;
wire  signed [31:0] tmp_128_fu_2060_p4;
wire  signed [31:0] tmp_129_fu_2076_p4;
wire  signed [31:0] tmp_130_fu_2086_p4;
wire  signed [31:0] tmp_131_fu_2102_p4;
wire  signed [31:0] tmp_132_fu_2112_p4;
wire   [31:0] tmp_4_60_fu_2070_p2;
wire   [31:0] tmp_4_61_fu_2096_p2;
wire   [31:0] tmp_4_59_fu_2044_p2;
wire   [31:0] tmp_4_58_fu_2018_p2;
wire   [31:0] tmp1_fu_2128_p2;
wire   [31:0] tmp2_fu_2134_p2;
wire   [31:0] tmp_4_55_fu_1940_p2;
wire   [31:0] tmp_4_54_fu_1914_p2;
wire   [31:0] tmp_4_57_fu_1992_p2;
wire   [31:0] tmp_4_56_fu_1966_p2;
wire   [31:0] tmp69_fu_2154_p2;
wire   [31:0] tmp70_fu_2160_p2;
wire   [30:0] tmp_136_fu_2166_p1;
wire   [30:0] tmp_139_fu_2170_p1;
wire   [30:0] tmp_134_fu_2140_p1;
wire   [30:0] tmp_135_fu_2144_p1;
wire   [31:0] tmp68_fu_2174_p2;
wire   [31:0] tmp65_fu_2148_p2;
wire   [31:0] tmp_4_47_fu_1732_p2;
wire   [31:0] tmp_4_46_fu_1706_p2;
wire   [31:0] tmp_4_49_fu_1784_p2;
wire   [31:0] tmp_4_48_fu_1758_p2;
wire   [31:0] tmp73_fu_2198_p2;
wire   [31:0] tmp74_fu_2204_p2;
wire   [31:0] tmp_4_51_fu_1836_p2;
wire   [31:0] tmp_4_50_fu_1810_p2;
wire   [31:0] tmp_4_53_fu_1888_p2;
wire   [31:0] tmp_4_52_fu_1862_p2;
wire   [31:0] tmp76_fu_2224_p2;
wire   [31:0] tmp77_fu_2230_p2;
wire   [30:0] tmp_142_fu_2236_p1;
wire   [30:0] tmp_147_fu_2240_p1;
wire   [30:0] tmp_140_fu_2210_p1;
wire   [30:0] tmp_141_fu_2214_p1;
wire   [31:0] tmp75_fu_2244_p2;
wire   [31:0] tmp72_fu_2218_p2;
wire   [30:0] tmp_138_fu_2186_p2;
wire   [30:0] tmp_137_fu_2180_p2;
wire   [30:0] tmp_144_fu_2256_p2;
wire   [30:0] tmp_143_fu_2250_p2;
wire   [31:0] tmp71_fu_2262_p2;
wire   [31:0] tmp64_fu_2192_p2;
wire   [31:0] tmp_4_31_fu_1316_p2;
wire   [31:0] tmp_4_30_fu_1290_p2;
wire   [31:0] tmp_4_33_fu_1368_p2;
wire   [31:0] tmp_4_32_fu_1342_p2;
wire   [31:0] tmp81_fu_2286_p2;
wire   [31:0] tmp82_fu_2292_p2;
wire   [31:0] tmp_4_35_fu_1420_p2;
wire   [31:0] tmp_4_34_fu_1394_p2;
wire   [31:0] tmp_4_37_fu_1472_p2;
wire   [31:0] tmp_4_36_fu_1446_p2;
wire   [31:0] tmp84_fu_2312_p2;
wire   [31:0] tmp85_fu_2318_p2;
wire   [30:0] tmp_150_fu_2324_p1;
wire   [30:0] tmp_153_fu_2328_p1;
wire   [30:0] tmp_148_fu_2298_p1;
wire   [30:0] tmp_149_fu_2302_p1;
wire   [31:0] tmp83_fu_2332_p2;
wire   [31:0] tmp80_fu_2306_p2;
wire   [31:0] tmp_4_39_fu_1524_p2;
wire   [31:0] tmp_4_38_fu_1498_p2;
wire   [31:0] tmp_4_41_fu_1576_p2;
wire   [31:0] tmp_4_40_fu_1550_p2;
wire   [31:0] tmp88_fu_2356_p2;
wire   [31:0] tmp89_fu_2362_p2;
wire   [31:0] tmp_4_43_fu_1628_p2;
wire   [31:0] tmp_4_42_fu_1602_p2;
wire   [31:0] tmp_4_45_fu_1680_p2;
wire   [31:0] tmp_4_44_fu_1654_p2;
wire   [31:0] tmp91_fu_2382_p2;
wire   [31:0] tmp92_fu_2388_p2;
wire   [30:0] tmp_156_fu_2394_p1;
wire   [30:0] tmp_163_fu_2398_p1;
wire   [30:0] tmp_154_fu_2368_p1;
wire   [30:0] tmp_155_fu_2372_p1;
wire   [31:0] tmp90_fu_2402_p2;
wire   [31:0] tmp87_fu_2376_p2;
wire   [30:0] tmp_152_fu_2344_p2;
wire   [30:0] tmp_151_fu_2338_p2;
wire   [30:0] tmp_158_fu_2414_p2;
wire   [30:0] tmp_157_fu_2408_p2;
wire   [31:0] tmp86_fu_2420_p2;
wire   [31:0] tmp79_fu_2350_p2;
wire   [30:0] tmp_145_fu_2268_p2;
wire   [30:0] tmp_146_fu_2274_p2;
wire   [31:0] tmp_s_fu_484_p2;
wire   [31:0] tmp_4_2_fu_536_p2;
wire   [31:0] tmp_4_1_fu_510_p2;
wire   [31:0] tmp_4_4_fu_588_p2;
wire   [31:0] tmp97_fu_2450_p2;
wire   [31:0] tmp98_fu_2456_p2;
wire   [31:0] tmp_4_3_fu_562_p2;
wire   [31:0] tmp_4_6_fu_640_p2;
wire   [31:0] tmp_4_5_fu_614_p2;
wire   [31:0] tmp_4_8_fu_692_p2;
wire   [31:0] tmp100_fu_2476_p2;
wire   [31:0] tmp101_fu_2482_p2;
wire   [30:0] tmp_166_fu_2488_p1;
wire   [30:0] tmp_169_fu_2492_p1;
wire   [30:0] tmp_164_fu_2462_p1;
wire   [30:0] tmp_165_fu_2466_p1;
wire   [31:0] tmp99_fu_2496_p2;
wire   [31:0] tmp96_fu_2470_p2;
wire   [31:0] tmp_4_7_fu_666_p2;
wire   [31:0] tmp_4_s_fu_744_p2;
wire   [31:0] tmp_4_9_fu_718_p2;
wire   [31:0] tmp_4_11_fu_796_p2;
wire   [31:0] tmp104_fu_2520_p2;
wire   [31:0] tmp105_fu_2526_p2;
wire   [31:0] tmp_4_10_fu_770_p2;
wire   [31:0] tmp_4_13_fu_848_p2;
wire   [31:0] tmp_4_12_fu_822_p2;
wire   [31:0] tmp_4_15_fu_900_p2;
wire   [31:0] tmp107_fu_2546_p2;
wire   [31:0] tmp108_fu_2552_p2;
wire   [30:0] tmp_172_fu_2558_p1;
wire   [30:0] tmp_177_fu_2562_p1;
wire   [30:0] tmp_170_fu_2532_p1;
wire   [30:0] tmp_171_fu_2536_p1;
wire   [31:0] tmp106_fu_2566_p2;
wire   [31:0] tmp103_fu_2540_p2;
wire   [30:0] tmp_168_fu_2508_p2;
wire   [30:0] tmp_167_fu_2502_p2;
wire   [30:0] tmp_174_fu_2578_p2;
wire   [30:0] tmp_173_fu_2572_p2;
wire   [31:0] tmp_4_14_fu_874_p2;
wire   [31:0] tmp_4_17_fu_952_p2;
wire   [31:0] tmp_4_16_fu_926_p2;
wire   [31:0] tmp_4_19_fu_1004_p2;
wire   [31:0] tmp112_fu_2602_p2;
wire   [31:0] tmp113_fu_2608_p2;
wire   [31:0] tmp_4_18_fu_978_p2;
wire   [31:0] tmp_4_21_fu_1056_p2;
wire   [31:0] tmp_4_20_fu_1030_p2;
wire   [31:0] tmp_4_23_fu_1108_p2;
wire   [31:0] tmp115_fu_2628_p2;
wire   [31:0] tmp116_fu_2634_p2;
wire   [30:0] tmp_180_fu_2640_p1;
wire   [30:0] tmp_183_fu_2644_p1;
wire   [30:0] tmp_178_fu_2614_p1;
wire   [30:0] tmp_179_fu_2618_p1;
wire   [31:0] tmp114_fu_2648_p2;
wire   [31:0] tmp111_fu_2622_p2;
wire   [31:0] tmp_4_22_fu_1082_p2;
wire   [31:0] tmp_4_25_fu_1160_p2;
wire   [31:0] tmp_4_24_fu_1134_p2;
wire   [31:0] tmp_4_27_fu_1212_p2;
wire   [31:0] tmp119_fu_2672_p2;
wire   [31:0] tmp120_fu_2678_p2;
wire   [31:0] tmp_4_26_fu_1186_p2;
wire   [31:0] tmp_4_29_fu_1264_p2;
wire   [31:0] tmp_4_28_fu_1238_p2;
wire   [31:0] tmp_4_62_fu_2122_p2;
wire   [31:0] tmp122_fu_2698_p2;
wire   [31:0] tmp123_fu_2704_p2;
wire   [30:0] tmp_186_fu_2710_p1;
wire   [30:0] tmp_195_fu_2714_p1;
wire   [30:0] tmp_184_fu_2684_p1;
wire   [30:0] tmp_185_fu_2688_p1;
wire   [31:0] tmp121_fu_2718_p2;
wire   [31:0] tmp118_fu_2692_p2;
wire   [30:0] tmp_182_fu_2660_p2;
wire   [30:0] tmp_181_fu_2654_p2;
wire   [30:0] tmp_188_fu_2730_p2;
wire   [30:0] tmp_187_fu_2724_p2;
wire   [31:0] tmp117_fu_2736_p2;
wire   [31:0] tmp110_fu_2666_p2;
wire   [30:0] tmp_189_fu_2742_p2;
wire   [30:0] tmp_190_fu_2748_p2;
wire   [30:0] tmp_175_fu_2590_p2;
wire   [30:0] tmp_176_fu_2596_p2;
wire   [31:0] tmp94_fu_2780_p2;
wire   [30:0] tmp_161_fu_2772_p2;
wire   [31:0] tmp93_fu_2784_p2;
wire   [31:0] tmp62_fu_2776_p2;
wire   [30:0] tmp_193_fu_2789_p2;
wire   [30:0] tmp_194_fu_2794_p2;
wire   [0:0] tmp_7_fu_2811_p2;
wire   [30:0] temp_1_62_cast_fu_2805_p2;
wire   [30:0] tmp_8_fu_2817_p3;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1741;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_2834 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_363 <= tmp_mid2_v_reg_2848;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_363 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_395_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_352 <= indvar_flatten_next_fu_401_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_352 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_395_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_374 <= j_1_fu_445_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_374 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_2834 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        C_addr_reg_2869 <= tmp_196_cast_fu_471_p1;
        tmp102_reg_2904 <= tmp102_fu_2584_p2;
        tmp109_reg_2909 <= tmp109_fu_2754_p2;
        tmp63_reg_2874 <= tmp63_fu_2280_p2;
        tmp78_reg_2889 <= tmp78_fu_2438_p2;
        tmp95_reg_2899 <= tmp95_fu_2514_p2;
        tmp_159_reg_2879 <= tmp_159_fu_2426_p2;
        tmp_160_reg_2884 <= tmp_160_fu_2432_p2;
        tmp_162_reg_2894 <= tmp_162_fu_2444_p2;
        tmp_191_reg_2914 <= tmp_191_fu_2760_p2;
        tmp_192_reg_2919 <= tmp_192_fu_2766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_2834 <= exitcond_flatten_fu_395_p2;
        exitcond_flatten_reg_2834_pp0_iter1_reg <= exitcond_flatten_reg_2834;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_mid2_reg_2843 <= j_mid2_fu_419_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_395_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_mid2_v_reg_2848 <= tmp_mid2_v_fu_427_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_2834_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_395_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_2834 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_367_p4 = tmp_mid2_v_reg_2848;
    end else begin
        ap_phi_mux_i_phi_fu_367_p4 = i_reg_363;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1741)) begin
        if ((relu_read_read_fu_308_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_388_p4 = temp_1_s_fu_2798_p2;
        end else if ((relu_read_read_fu_308_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_388_p4 = tmp_8_cast_fu_2825_p1;
        end else begin
            ap_phi_mux_storemerge_phi_fu_388_p4 = ap_phi_reg_pp0_iter2_storemerge_reg_385;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_388_p4 = ap_phi_reg_pp0_iter2_storemerge_reg_385;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_395_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_395_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_mid2_fu_435_p1;

assign B_address0 = tmp_2_fu_440_p1;

assign C_address0 = C_addr_reg_2869;

assign C_d0 = ap_phi_mux_storemerge_phi_fu_388_p4;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1741 = ((exitcond_flatten_reg_2834_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_storemerge_reg_385 = 'bx;

assign exitcond_flatten_fu_395_p2 = ((indvar_flatten_reg_352 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_413_p2 = ((j_reg_374 == 7'd64) ? 1'b1 : 1'b0);

assign i_1_fu_407_p2 = (7'd1 + ap_phi_mux_i_phi_fu_367_p4);

assign indvar_flatten_next_fu_401_p2 = (indvar_flatten_reg_352 + 13'd1);

assign j_1_fu_445_p2 = (j_mid2_fu_419_p3 + 7'd1);

assign j_mid2_fu_419_p3 = ((exitcond_fu_413_p2[0:0] === 1'b1) ? 7'd0 : j_reg_374);

assign relu_read_read_fu_308_p2 = relu;

assign temp_1_62_cast_fu_2805_p2 = (tmp_193_fu_2789_p2 + tmp_194_fu_2794_p2);

assign temp_1_s_fu_2798_p2 = (tmp93_fu_2784_p2 + tmp62_fu_2776_p2);

assign tmp100_fu_2476_p2 = (tmp_4_3_fu_562_p2 + tmp_4_6_fu_640_p2);

assign tmp101_fu_2482_p2 = (tmp_4_5_fu_614_p2 + tmp_4_8_fu_692_p2);

assign tmp102_fu_2584_p2 = (tmp106_fu_2566_p2 + tmp103_fu_2540_p2);

assign tmp103_fu_2540_p2 = (tmp105_fu_2526_p2 + tmp104_fu_2520_p2);

assign tmp104_fu_2520_p2 = (tmp_4_7_fu_666_p2 + tmp_4_s_fu_744_p2);

assign tmp105_fu_2526_p2 = (tmp_4_9_fu_718_p2 + tmp_4_11_fu_796_p2);

assign tmp106_fu_2566_p2 = (tmp108_fu_2552_p2 + tmp107_fu_2546_p2);

assign tmp107_fu_2546_p2 = (tmp_4_10_fu_770_p2 + tmp_4_13_fu_848_p2);

assign tmp108_fu_2552_p2 = (tmp_4_12_fu_822_p2 + tmp_4_15_fu_900_p2);

assign tmp109_fu_2754_p2 = (tmp117_fu_2736_p2 + tmp110_fu_2666_p2);

assign tmp110_fu_2666_p2 = (tmp114_fu_2648_p2 + tmp111_fu_2622_p2);

assign tmp111_fu_2622_p2 = (tmp113_fu_2608_p2 + tmp112_fu_2602_p2);

assign tmp112_fu_2602_p2 = (tmp_4_14_fu_874_p2 + tmp_4_17_fu_952_p2);

assign tmp113_fu_2608_p2 = (tmp_4_16_fu_926_p2 + tmp_4_19_fu_1004_p2);

assign tmp114_fu_2648_p2 = (tmp116_fu_2634_p2 + tmp115_fu_2628_p2);

assign tmp115_fu_2628_p2 = (tmp_4_18_fu_978_p2 + tmp_4_21_fu_1056_p2);

assign tmp116_fu_2634_p2 = (tmp_4_20_fu_1030_p2 + tmp_4_23_fu_1108_p2);

assign tmp117_fu_2736_p2 = (tmp121_fu_2718_p2 + tmp118_fu_2692_p2);

assign tmp118_fu_2692_p2 = (tmp120_fu_2678_p2 + tmp119_fu_2672_p2);

assign tmp119_fu_2672_p2 = (tmp_4_22_fu_1082_p2 + tmp_4_25_fu_1160_p2);

assign tmp120_fu_2678_p2 = (tmp_4_24_fu_1134_p2 + tmp_4_27_fu_1212_p2);

assign tmp121_fu_2718_p2 = (tmp123_fu_2704_p2 + tmp122_fu_2698_p2);

assign tmp122_fu_2698_p2 = (tmp_4_26_fu_1186_p2 + tmp_4_29_fu_1264_p2);

assign tmp123_fu_2704_p2 = (tmp_4_28_fu_1238_p2 + tmp_4_62_fu_2122_p2);

assign tmp1_fu_2128_p2 = (tmp_4_60_fu_2070_p2 + tmp_4_61_fu_2096_p2);

assign tmp2_fu_2134_p2 = (tmp_4_59_fu_2044_p2 + tmp_4_58_fu_2018_p2);

assign tmp62_fu_2776_p2 = (tmp78_reg_2889 + tmp63_reg_2874);

assign tmp63_fu_2280_p2 = (tmp71_fu_2262_p2 + tmp64_fu_2192_p2);

assign tmp64_fu_2192_p2 = (tmp68_fu_2174_p2 + tmp65_fu_2148_p2);

assign tmp65_fu_2148_p2 = (tmp2_fu_2134_p2 + tmp1_fu_2128_p2);

assign tmp68_fu_2174_p2 = (tmp70_fu_2160_p2 + tmp69_fu_2154_p2);

assign tmp69_fu_2154_p2 = (tmp_4_55_fu_1940_p2 + tmp_4_54_fu_1914_p2);

assign tmp70_fu_2160_p2 = (tmp_4_57_fu_1992_p2 + tmp_4_56_fu_1966_p2);

assign tmp71_fu_2262_p2 = (tmp75_fu_2244_p2 + tmp72_fu_2218_p2);

assign tmp72_fu_2218_p2 = (tmp74_fu_2204_p2 + tmp73_fu_2198_p2);

assign tmp73_fu_2198_p2 = (tmp_4_47_fu_1732_p2 + tmp_4_46_fu_1706_p2);

assign tmp74_fu_2204_p2 = (tmp_4_49_fu_1784_p2 + tmp_4_48_fu_1758_p2);

assign tmp75_fu_2244_p2 = (tmp77_fu_2230_p2 + tmp76_fu_2224_p2);

assign tmp76_fu_2224_p2 = (tmp_4_51_fu_1836_p2 + tmp_4_50_fu_1810_p2);

assign tmp77_fu_2230_p2 = (tmp_4_53_fu_1888_p2 + tmp_4_52_fu_1862_p2);

assign tmp78_fu_2438_p2 = (tmp86_fu_2420_p2 + tmp79_fu_2350_p2);

assign tmp79_fu_2350_p2 = (tmp83_fu_2332_p2 + tmp80_fu_2306_p2);

assign tmp80_fu_2306_p2 = (tmp82_fu_2292_p2 + tmp81_fu_2286_p2);

assign tmp81_fu_2286_p2 = (tmp_4_31_fu_1316_p2 + tmp_4_30_fu_1290_p2);

assign tmp82_fu_2292_p2 = (tmp_4_33_fu_1368_p2 + tmp_4_32_fu_1342_p2);

assign tmp83_fu_2332_p2 = (tmp85_fu_2318_p2 + tmp84_fu_2312_p2);

assign tmp84_fu_2312_p2 = (tmp_4_35_fu_1420_p2 + tmp_4_34_fu_1394_p2);

assign tmp85_fu_2318_p2 = (tmp_4_37_fu_1472_p2 + tmp_4_36_fu_1446_p2);

assign tmp86_fu_2420_p2 = (tmp90_fu_2402_p2 + tmp87_fu_2376_p2);

assign tmp87_fu_2376_p2 = (tmp89_fu_2362_p2 + tmp88_fu_2356_p2);

assign tmp88_fu_2356_p2 = (tmp_4_39_fu_1524_p2 + tmp_4_38_fu_1498_p2);

assign tmp89_fu_2362_p2 = (tmp_4_41_fu_1576_p2 + tmp_4_40_fu_1550_p2);

assign tmp90_fu_2402_p2 = (tmp92_fu_2388_p2 + tmp91_fu_2382_p2);

assign tmp91_fu_2382_p2 = (tmp_4_43_fu_1628_p2 + tmp_4_42_fu_1602_p2);

assign tmp92_fu_2388_p2 = (tmp_4_45_fu_1680_p2 + tmp_4_44_fu_1654_p2);

assign tmp93_fu_2784_p2 = (tmp109_reg_2909 + tmp94_fu_2780_p2);

assign tmp94_fu_2780_p2 = (tmp102_reg_2904 + tmp95_reg_2899);

assign tmp95_fu_2514_p2 = (tmp99_fu_2496_p2 + tmp96_fu_2470_p2);

assign tmp96_fu_2470_p2 = (tmp98_fu_2456_p2 + tmp97_fu_2450_p2);

assign tmp97_fu_2450_p2 = (tmp_s_fu_484_p2 + tmp_4_2_fu_536_p2);

assign tmp98_fu_2456_p2 = (tmp_4_1_fu_510_p2 + tmp_4_4_fu_588_p2);

assign tmp99_fu_2496_p2 = (tmp101_fu_2482_p2 + tmp100_fu_2476_p2);

assign tmp_100_fu_1696_p4 = {{B_q0[1535:1504]}};

assign tmp_101_fu_1712_p4 = {{A_q0[1567:1536]}};

assign tmp_102_fu_1722_p4 = {{B_q0[1567:1536]}};

assign tmp_103_fu_1738_p4 = {{A_q0[1599:1568]}};

assign tmp_104_fu_1748_p4 = {{B_q0[1599:1568]}};

assign tmp_105_fu_1764_p4 = {{A_q0[1631:1600]}};

assign tmp_106_fu_1774_p4 = {{B_q0[1631:1600]}};

assign tmp_107_fu_1790_p4 = {{A_q0[1663:1632]}};

assign tmp_108_fu_1800_p4 = {{B_q0[1663:1632]}};

assign tmp_109_fu_1816_p4 = {{A_q0[1695:1664]}};

assign tmp_10_fu_526_p4 = {{B_q0[95:64]}};

assign tmp_110_fu_1826_p4 = {{B_q0[1695:1664]}};

assign tmp_111_fu_1842_p4 = {{A_q0[1727:1696]}};

assign tmp_112_fu_1852_p4 = {{B_q0[1727:1696]}};

assign tmp_113_fu_1868_p4 = {{A_q0[1759:1728]}};

assign tmp_114_fu_1878_p4 = {{B_q0[1759:1728]}};

assign tmp_115_fu_1894_p4 = {{A_q0[1791:1760]}};

assign tmp_116_fu_1904_p4 = {{B_q0[1791:1760]}};

assign tmp_117_fu_1920_p4 = {{A_q0[1823:1792]}};

assign tmp_118_fu_1930_p4 = {{B_q0[1823:1792]}};

assign tmp_119_fu_1946_p4 = {{A_q0[1855:1824]}};

assign tmp_11_fu_542_p4 = {{A_q0[127:96]}};

assign tmp_120_fu_1956_p4 = {{B_q0[1855:1824]}};

assign tmp_121_fu_1972_p4 = {{A_q0[1887:1856]}};

assign tmp_122_fu_1982_p4 = {{B_q0[1887:1856]}};

assign tmp_123_fu_1998_p4 = {{A_q0[1919:1888]}};

assign tmp_124_fu_2008_p4 = {{B_q0[1919:1888]}};

assign tmp_125_fu_2024_p4 = {{A_q0[1951:1920]}};

assign tmp_126_fu_2034_p4 = {{B_q0[1951:1920]}};

assign tmp_127_fu_2050_p4 = {{A_q0[1983:1952]}};

assign tmp_128_fu_2060_p4 = {{B_q0[1983:1952]}};

assign tmp_129_fu_2076_p4 = {{A_q0[2015:1984]}};

assign tmp_12_fu_552_p4 = {{B_q0[127:96]}};

assign tmp_130_fu_2086_p4 = {{B_q0[2015:1984]}};

assign tmp_131_fu_2102_p4 = {{A_q0[2047:2016]}};

assign tmp_132_fu_2112_p4 = {{B_q0[2047:2016]}};

assign tmp_133_fu_480_p1 = B_q0[31:0];

assign tmp_134_fu_2140_p1 = tmp1_fu_2128_p2[30:0];

assign tmp_135_fu_2144_p1 = tmp2_fu_2134_p2[30:0];

assign tmp_136_fu_2166_p1 = tmp69_fu_2154_p2[30:0];

assign tmp_137_fu_2180_p2 = (tmp_136_fu_2166_p1 + tmp_139_fu_2170_p1);

assign tmp_138_fu_2186_p2 = (tmp_134_fu_2140_p1 + tmp_135_fu_2144_p1);

assign tmp_139_fu_2170_p1 = tmp70_fu_2160_p2[30:0];

assign tmp_13_fu_568_p4 = {{A_q0[159:128]}};

assign tmp_140_fu_2210_p1 = tmp73_fu_2198_p2[30:0];

assign tmp_141_fu_2214_p1 = tmp74_fu_2204_p2[30:0];

assign tmp_142_fu_2236_p1 = tmp76_fu_2224_p2[30:0];

assign tmp_143_fu_2250_p2 = (tmp_142_fu_2236_p1 + tmp_147_fu_2240_p1);

assign tmp_144_fu_2256_p2 = (tmp_140_fu_2210_p1 + tmp_141_fu_2214_p1);

assign tmp_145_fu_2268_p2 = (tmp_138_fu_2186_p2 + tmp_137_fu_2180_p2);

assign tmp_146_fu_2274_p2 = (tmp_144_fu_2256_p2 + tmp_143_fu_2250_p2);

assign tmp_147_fu_2240_p1 = tmp77_fu_2230_p2[30:0];

assign tmp_148_fu_2298_p1 = tmp81_fu_2286_p2[30:0];

assign tmp_149_fu_2302_p1 = tmp82_fu_2292_p2[30:0];

assign tmp_14_fu_578_p4 = {{B_q0[159:128]}};

assign tmp_150_fu_2324_p1 = tmp84_fu_2312_p2[30:0];

assign tmp_151_fu_2338_p2 = (tmp_150_fu_2324_p1 + tmp_153_fu_2328_p1);

assign tmp_152_fu_2344_p2 = (tmp_148_fu_2298_p1 + tmp_149_fu_2302_p1);

assign tmp_153_fu_2328_p1 = tmp85_fu_2318_p2[30:0];

assign tmp_154_fu_2368_p1 = tmp88_fu_2356_p2[30:0];

assign tmp_155_fu_2372_p1 = tmp89_fu_2362_p2[30:0];

assign tmp_156_fu_2394_p1 = tmp91_fu_2382_p2[30:0];

assign tmp_157_fu_2408_p2 = (tmp_156_fu_2394_p1 + tmp_163_fu_2398_p1);

assign tmp_158_fu_2414_p2 = (tmp_154_fu_2368_p1 + tmp_155_fu_2372_p1);

assign tmp_159_fu_2426_p2 = (tmp_152_fu_2344_p2 + tmp_151_fu_2338_p2);

assign tmp_15_fu_594_p4 = {{A_q0[191:160]}};

assign tmp_160_fu_2432_p2 = (tmp_158_fu_2414_p2 + tmp_157_fu_2408_p2);

assign tmp_161_fu_2772_p2 = (tmp_159_reg_2879 + tmp_160_reg_2884);

assign tmp_162_fu_2444_p2 = (tmp_145_fu_2268_p2 + tmp_146_fu_2274_p2);

assign tmp_163_fu_2398_p1 = tmp92_fu_2388_p2[30:0];

assign tmp_164_fu_2462_p1 = tmp97_fu_2450_p2[30:0];

assign tmp_165_fu_2466_p1 = tmp98_fu_2456_p2[30:0];

assign tmp_166_fu_2488_p1 = tmp100_fu_2476_p2[30:0];

assign tmp_167_fu_2502_p2 = (tmp_166_fu_2488_p1 + tmp_169_fu_2492_p1);

assign tmp_168_fu_2508_p2 = (tmp_164_fu_2462_p1 + tmp_165_fu_2466_p1);

assign tmp_169_fu_2492_p1 = tmp101_fu_2482_p2[30:0];

assign tmp_16_fu_604_p4 = {{B_q0[191:160]}};

assign tmp_170_fu_2532_p1 = tmp104_fu_2520_p2[30:0];

assign tmp_171_fu_2536_p1 = tmp105_fu_2526_p2[30:0];

assign tmp_172_fu_2558_p1 = tmp107_fu_2546_p2[30:0];

assign tmp_173_fu_2572_p2 = (tmp_172_fu_2558_p1 + tmp_177_fu_2562_p1);

assign tmp_174_fu_2578_p2 = (tmp_170_fu_2532_p1 + tmp_171_fu_2536_p1);

assign tmp_175_fu_2590_p2 = (tmp_168_fu_2508_p2 + tmp_167_fu_2502_p2);

assign tmp_176_fu_2596_p2 = (tmp_174_fu_2578_p2 + tmp_173_fu_2572_p2);

assign tmp_177_fu_2562_p1 = tmp108_fu_2552_p2[30:0];

assign tmp_178_fu_2614_p1 = tmp112_fu_2602_p2[30:0];

assign tmp_179_fu_2618_p1 = tmp113_fu_2608_p2[30:0];

assign tmp_17_fu_620_p4 = {{A_q0[223:192]}};

assign tmp_180_fu_2640_p1 = tmp115_fu_2628_p2[30:0];

assign tmp_181_fu_2654_p2 = (tmp_180_fu_2640_p1 + tmp_183_fu_2644_p1);

assign tmp_182_fu_2660_p2 = (tmp_178_fu_2614_p1 + tmp_179_fu_2618_p1);

assign tmp_183_fu_2644_p1 = tmp116_fu_2634_p2[30:0];

assign tmp_184_fu_2684_p1 = tmp119_fu_2672_p2[30:0];

assign tmp_185_fu_2688_p1 = tmp120_fu_2678_p2[30:0];

assign tmp_186_fu_2710_p1 = tmp122_fu_2698_p2[30:0];

assign tmp_187_fu_2724_p2 = (tmp_186_fu_2710_p1 + tmp_195_fu_2714_p1);

assign tmp_188_fu_2730_p2 = (tmp_184_fu_2684_p1 + tmp_185_fu_2688_p1);

assign tmp_189_fu_2742_p2 = (tmp_182_fu_2660_p2 + tmp_181_fu_2654_p2);

assign tmp_18_fu_630_p4 = {{B_q0[223:192]}};

assign tmp_190_fu_2748_p2 = (tmp_188_fu_2730_p2 + tmp_187_fu_2724_p2);

assign tmp_191_fu_2760_p2 = (tmp_189_fu_2742_p2 + tmp_190_fu_2748_p2);

assign tmp_192_fu_2766_p2 = (tmp_175_fu_2590_p2 + tmp_176_fu_2596_p2);

assign tmp_193_fu_2789_p2 = (tmp_162_reg_2894 + tmp_161_fu_2772_p2);

assign tmp_194_fu_2794_p2 = (tmp_192_reg_2919 + tmp_191_reg_2914);

assign tmp_195_cast_fu_458_p1 = tmp_fu_451_p3;

assign tmp_195_fu_2714_p1 = tmp123_fu_2704_p2[30:0];

assign tmp_196_cast_fu_471_p1 = tmp_3_fu_465_p2;

assign tmp_19_fu_646_p4 = {{A_q0[255:224]}};

assign tmp_20_fu_656_p4 = {{B_q0[255:224]}};

assign tmp_21_fu_672_p4 = {{A_q0[287:256]}};

assign tmp_22_fu_682_p4 = {{B_q0[287:256]}};

assign tmp_23_fu_698_p4 = {{A_q0[319:288]}};

assign tmp_24_fu_708_p4 = {{B_q0[319:288]}};

assign tmp_25_fu_724_p4 = {{A_q0[351:320]}};

assign tmp_26_fu_734_p4 = {{B_q0[351:320]}};

assign tmp_27_fu_750_p4 = {{A_q0[383:352]}};

assign tmp_28_fu_760_p4 = {{B_q0[383:352]}};

assign tmp_29_fu_776_p4 = {{A_q0[415:384]}};

assign tmp_2_cast_fu_462_p1 = j_mid2_reg_2843;

assign tmp_2_fu_440_p1 = j_mid2_fu_419_p3;

assign tmp_30_fu_786_p4 = {{B_q0[415:384]}};

assign tmp_31_fu_802_p4 = {{A_q0[447:416]}};

assign tmp_32_fu_812_p4 = {{B_q0[447:416]}};

assign tmp_33_fu_828_p4 = {{A_q0[479:448]}};

assign tmp_34_fu_838_p4 = {{B_q0[479:448]}};

assign tmp_35_fu_854_p4 = {{A_q0[511:480]}};

assign tmp_36_fu_864_p4 = {{B_q0[511:480]}};

assign tmp_37_fu_880_p4 = {{A_q0[543:512]}};

assign tmp_38_fu_890_p4 = {{B_q0[543:512]}};

assign tmp_39_fu_906_p4 = {{A_q0[575:544]}};

assign tmp_3_fu_465_p2 = (tmp_195_cast_fu_458_p1 + tmp_2_cast_fu_462_p1);

assign tmp_40_fu_916_p4 = {{B_q0[575:544]}};

assign tmp_41_fu_932_p4 = {{A_q0[607:576]}};

assign tmp_42_fu_942_p4 = {{B_q0[607:576]}};

assign tmp_43_fu_958_p4 = {{A_q0[639:608]}};

assign tmp_44_fu_968_p4 = {{B_q0[639:608]}};

assign tmp_45_fu_984_p4 = {{A_q0[671:640]}};

assign tmp_46_fu_994_p4 = {{B_q0[671:640]}};

assign tmp_47_fu_1010_p4 = {{A_q0[703:672]}};

assign tmp_48_fu_1020_p4 = {{B_q0[703:672]}};

assign tmp_49_fu_1036_p4 = {{A_q0[735:704]}};

assign tmp_4_10_fu_770_p2 = ($signed(tmp_27_fu_750_p4) * $signed(tmp_28_fu_760_p4));

assign tmp_4_11_fu_796_p2 = ($signed(tmp_29_fu_776_p4) * $signed(tmp_30_fu_786_p4));

assign tmp_4_12_fu_822_p2 = ($signed(tmp_31_fu_802_p4) * $signed(tmp_32_fu_812_p4));

assign tmp_4_13_fu_848_p2 = ($signed(tmp_33_fu_828_p4) * $signed(tmp_34_fu_838_p4));

assign tmp_4_14_fu_874_p2 = ($signed(tmp_35_fu_854_p4) * $signed(tmp_36_fu_864_p4));

assign tmp_4_15_fu_900_p2 = ($signed(tmp_37_fu_880_p4) * $signed(tmp_38_fu_890_p4));

assign tmp_4_16_fu_926_p2 = ($signed(tmp_39_fu_906_p4) * $signed(tmp_40_fu_916_p4));

assign tmp_4_17_fu_952_p2 = ($signed(tmp_41_fu_932_p4) * $signed(tmp_42_fu_942_p4));

assign tmp_4_18_fu_978_p2 = ($signed(tmp_43_fu_958_p4) * $signed(tmp_44_fu_968_p4));

assign tmp_4_19_fu_1004_p2 = ($signed(tmp_45_fu_984_p4) * $signed(tmp_46_fu_994_p4));

assign tmp_4_1_fu_510_p2 = ($signed(tmp_5_fu_490_p4) * $signed(tmp_6_fu_500_p4));

assign tmp_4_20_fu_1030_p2 = ($signed(tmp_47_fu_1010_p4) * $signed(tmp_48_fu_1020_p4));

assign tmp_4_21_fu_1056_p2 = ($signed(tmp_49_fu_1036_p4) * $signed(tmp_50_fu_1046_p4));

assign tmp_4_22_fu_1082_p2 = ($signed(tmp_51_fu_1062_p4) * $signed(tmp_52_fu_1072_p4));

assign tmp_4_23_fu_1108_p2 = ($signed(tmp_53_fu_1088_p4) * $signed(tmp_54_fu_1098_p4));

assign tmp_4_24_fu_1134_p2 = ($signed(tmp_55_fu_1114_p4) * $signed(tmp_56_fu_1124_p4));

assign tmp_4_25_fu_1160_p2 = ($signed(tmp_57_fu_1140_p4) * $signed(tmp_58_fu_1150_p4));

assign tmp_4_26_fu_1186_p2 = ($signed(tmp_59_fu_1166_p4) * $signed(tmp_60_fu_1176_p4));

assign tmp_4_27_fu_1212_p2 = ($signed(tmp_61_fu_1192_p4) * $signed(tmp_62_fu_1202_p4));

assign tmp_4_28_fu_1238_p2 = ($signed(tmp_63_fu_1218_p4) * $signed(tmp_64_fu_1228_p4));

assign tmp_4_29_fu_1264_p2 = ($signed(tmp_65_fu_1244_p4) * $signed(tmp_66_fu_1254_p4));

assign tmp_4_2_fu_536_p2 = ($signed(tmp_9_fu_516_p4) * $signed(tmp_10_fu_526_p4));

assign tmp_4_30_fu_1290_p2 = ($signed(tmp_67_fu_1270_p4) * $signed(tmp_68_fu_1280_p4));

assign tmp_4_31_fu_1316_p2 = ($signed(tmp_69_fu_1296_p4) * $signed(tmp_70_fu_1306_p4));

assign tmp_4_32_fu_1342_p2 = ($signed(tmp_71_fu_1322_p4) * $signed(tmp_72_fu_1332_p4));

assign tmp_4_33_fu_1368_p2 = ($signed(tmp_73_fu_1348_p4) * $signed(tmp_74_fu_1358_p4));

assign tmp_4_34_fu_1394_p2 = ($signed(tmp_75_fu_1374_p4) * $signed(tmp_76_fu_1384_p4));

assign tmp_4_35_fu_1420_p2 = ($signed(tmp_77_fu_1400_p4) * $signed(tmp_78_fu_1410_p4));

assign tmp_4_36_fu_1446_p2 = ($signed(tmp_79_fu_1426_p4) * $signed(tmp_80_fu_1436_p4));

assign tmp_4_37_fu_1472_p2 = ($signed(tmp_81_fu_1452_p4) * $signed(tmp_82_fu_1462_p4));

assign tmp_4_38_fu_1498_p2 = ($signed(tmp_83_fu_1478_p4) * $signed(tmp_84_fu_1488_p4));

assign tmp_4_39_fu_1524_p2 = ($signed(tmp_85_fu_1504_p4) * $signed(tmp_86_fu_1514_p4));

assign tmp_4_3_fu_562_p2 = ($signed(tmp_11_fu_542_p4) * $signed(tmp_12_fu_552_p4));

assign tmp_4_40_fu_1550_p2 = ($signed(tmp_87_fu_1530_p4) * $signed(tmp_88_fu_1540_p4));

assign tmp_4_41_fu_1576_p2 = ($signed(tmp_89_fu_1556_p4) * $signed(tmp_90_fu_1566_p4));

assign tmp_4_42_fu_1602_p2 = ($signed(tmp_91_fu_1582_p4) * $signed(tmp_92_fu_1592_p4));

assign tmp_4_43_fu_1628_p2 = ($signed(tmp_93_fu_1608_p4) * $signed(tmp_94_fu_1618_p4));

assign tmp_4_44_fu_1654_p2 = ($signed(tmp_95_fu_1634_p4) * $signed(tmp_96_fu_1644_p4));

assign tmp_4_45_fu_1680_p2 = ($signed(tmp_97_fu_1660_p4) * $signed(tmp_98_fu_1670_p4));

assign tmp_4_46_fu_1706_p2 = ($signed(tmp_99_fu_1686_p4) * $signed(tmp_100_fu_1696_p4));

assign tmp_4_47_fu_1732_p2 = ($signed(tmp_101_fu_1712_p4) * $signed(tmp_102_fu_1722_p4));

assign tmp_4_48_fu_1758_p2 = ($signed(tmp_103_fu_1738_p4) * $signed(tmp_104_fu_1748_p4));

assign tmp_4_49_fu_1784_p2 = ($signed(tmp_105_fu_1764_p4) * $signed(tmp_106_fu_1774_p4));

assign tmp_4_4_fu_588_p2 = ($signed(tmp_13_fu_568_p4) * $signed(tmp_14_fu_578_p4));

assign tmp_4_50_fu_1810_p2 = ($signed(tmp_107_fu_1790_p4) * $signed(tmp_108_fu_1800_p4));

assign tmp_4_51_fu_1836_p2 = ($signed(tmp_109_fu_1816_p4) * $signed(tmp_110_fu_1826_p4));

assign tmp_4_52_fu_1862_p2 = ($signed(tmp_111_fu_1842_p4) * $signed(tmp_112_fu_1852_p4));

assign tmp_4_53_fu_1888_p2 = ($signed(tmp_113_fu_1868_p4) * $signed(tmp_114_fu_1878_p4));

assign tmp_4_54_fu_1914_p2 = ($signed(tmp_115_fu_1894_p4) * $signed(tmp_116_fu_1904_p4));

assign tmp_4_55_fu_1940_p2 = ($signed(tmp_117_fu_1920_p4) * $signed(tmp_118_fu_1930_p4));

assign tmp_4_56_fu_1966_p2 = ($signed(tmp_119_fu_1946_p4) * $signed(tmp_120_fu_1956_p4));

assign tmp_4_57_fu_1992_p2 = ($signed(tmp_121_fu_1972_p4) * $signed(tmp_122_fu_1982_p4));

assign tmp_4_58_fu_2018_p2 = ($signed(tmp_123_fu_1998_p4) * $signed(tmp_124_fu_2008_p4));

assign tmp_4_59_fu_2044_p2 = ($signed(tmp_125_fu_2024_p4) * $signed(tmp_126_fu_2034_p4));

assign tmp_4_5_fu_614_p2 = ($signed(tmp_15_fu_594_p4) * $signed(tmp_16_fu_604_p4));

assign tmp_4_60_fu_2070_p2 = ($signed(tmp_127_fu_2050_p4) * $signed(tmp_128_fu_2060_p4));

assign tmp_4_61_fu_2096_p2 = ($signed(tmp_129_fu_2076_p4) * $signed(tmp_130_fu_2086_p4));

assign tmp_4_62_fu_2122_p2 = ($signed(tmp_131_fu_2102_p4) * $signed(tmp_132_fu_2112_p4));

assign tmp_4_6_fu_640_p2 = ($signed(tmp_17_fu_620_p4) * $signed(tmp_18_fu_630_p4));

assign tmp_4_7_fu_666_p2 = ($signed(tmp_19_fu_646_p4) * $signed(tmp_20_fu_656_p4));

assign tmp_4_8_fu_692_p2 = ($signed(tmp_21_fu_672_p4) * $signed(tmp_22_fu_682_p4));

assign tmp_4_9_fu_718_p2 = ($signed(tmp_23_fu_698_p4) * $signed(tmp_24_fu_708_p4));

assign tmp_4_fu_476_p1 = A_q0[31:0];

assign tmp_4_s_fu_744_p2 = ($signed(tmp_25_fu_724_p4) * $signed(tmp_26_fu_734_p4));

assign tmp_50_fu_1046_p4 = {{B_q0[735:704]}};

assign tmp_51_fu_1062_p4 = {{A_q0[767:736]}};

assign tmp_52_fu_1072_p4 = {{B_q0[767:736]}};

assign tmp_53_fu_1088_p4 = {{A_q0[799:768]}};

assign tmp_54_fu_1098_p4 = {{B_q0[799:768]}};

assign tmp_55_fu_1114_p4 = {{A_q0[831:800]}};

assign tmp_56_fu_1124_p4 = {{B_q0[831:800]}};

assign tmp_57_fu_1140_p4 = {{A_q0[863:832]}};

assign tmp_58_fu_1150_p4 = {{B_q0[863:832]}};

assign tmp_59_fu_1166_p4 = {{A_q0[895:864]}};

assign tmp_5_fu_490_p4 = {{A_q0[63:32]}};

assign tmp_60_fu_1176_p4 = {{B_q0[895:864]}};

assign tmp_61_fu_1192_p4 = {{A_q0[927:896]}};

assign tmp_62_fu_1202_p4 = {{B_q0[927:896]}};

assign tmp_63_fu_1218_p4 = {{A_q0[959:928]}};

assign tmp_64_fu_1228_p4 = {{B_q0[959:928]}};

assign tmp_65_fu_1244_p4 = {{A_q0[991:960]}};

assign tmp_66_fu_1254_p4 = {{B_q0[991:960]}};

assign tmp_67_fu_1270_p4 = {{A_q0[1023:992]}};

assign tmp_68_fu_1280_p4 = {{B_q0[1023:992]}};

assign tmp_69_fu_1296_p4 = {{A_q0[1055:1024]}};

assign tmp_6_fu_500_p4 = {{B_q0[63:32]}};

assign tmp_70_fu_1306_p4 = {{B_q0[1055:1024]}};

assign tmp_71_fu_1322_p4 = {{A_q0[1087:1056]}};

assign tmp_72_fu_1332_p4 = {{B_q0[1087:1056]}};

assign tmp_73_fu_1348_p4 = {{A_q0[1119:1088]}};

assign tmp_74_fu_1358_p4 = {{B_q0[1119:1088]}};

assign tmp_75_fu_1374_p4 = {{A_q0[1151:1120]}};

assign tmp_76_fu_1384_p4 = {{B_q0[1151:1120]}};

assign tmp_77_fu_1400_p4 = {{A_q0[1183:1152]}};

assign tmp_78_fu_1410_p4 = {{B_q0[1183:1152]}};

assign tmp_79_fu_1426_p4 = {{A_q0[1215:1184]}};

assign tmp_7_fu_2811_p2 = (($signed(temp_1_s_fu_2798_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_80_fu_1436_p4 = {{B_q0[1215:1184]}};

assign tmp_81_fu_1452_p4 = {{A_q0[1247:1216]}};

assign tmp_82_fu_1462_p4 = {{B_q0[1247:1216]}};

assign tmp_83_fu_1478_p4 = {{A_q0[1279:1248]}};

assign tmp_84_fu_1488_p4 = {{B_q0[1279:1248]}};

assign tmp_85_fu_1504_p4 = {{A_q0[1311:1280]}};

assign tmp_86_fu_1514_p4 = {{B_q0[1311:1280]}};

assign tmp_87_fu_1530_p4 = {{A_q0[1343:1312]}};

assign tmp_88_fu_1540_p4 = {{B_q0[1343:1312]}};

assign tmp_89_fu_1556_p4 = {{A_q0[1375:1344]}};

assign tmp_8_cast_fu_2825_p1 = tmp_8_fu_2817_p3;

assign tmp_8_fu_2817_p3 = ((tmp_7_fu_2811_p2[0:0] === 1'b1) ? temp_1_62_cast_fu_2805_p2 : 31'd0);

assign tmp_90_fu_1566_p4 = {{B_q0[1375:1344]}};

assign tmp_91_fu_1582_p4 = {{A_q0[1407:1376]}};

assign tmp_92_fu_1592_p4 = {{B_q0[1407:1376]}};

assign tmp_93_fu_1608_p4 = {{A_q0[1439:1408]}};

assign tmp_94_fu_1618_p4 = {{B_q0[1439:1408]}};

assign tmp_95_fu_1634_p4 = {{A_q0[1471:1440]}};

assign tmp_96_fu_1644_p4 = {{B_q0[1471:1440]}};

assign tmp_97_fu_1660_p4 = {{A_q0[1503:1472]}};

assign tmp_98_fu_1670_p4 = {{B_q0[1503:1472]}};

assign tmp_99_fu_1686_p4 = {{A_q0[1535:1504]}};

assign tmp_9_fu_516_p4 = {{A_q0[95:64]}};

assign tmp_fu_451_p3 = {{tmp_mid2_v_reg_2848}, {6'd0}};

assign tmp_mid2_fu_435_p1 = tmp_mid2_v_fu_427_p3;

assign tmp_mid2_v_fu_427_p3 = ((exitcond_fu_413_p2[0:0] === 1'b1) ? i_1_fu_407_p2 : ap_phi_mux_i_phi_fu_367_p4);

assign tmp_s_fu_484_p2 = ($signed(tmp_4_fu_476_p1) * $signed(tmp_133_fu_480_p1));

endmodule //matrix_mult
